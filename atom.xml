<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Avalon</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T01:38:22.371Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Reese</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电影的尽头是电影共产主义</title>
    <link href="http://yoursite.com/2019/07/30/post/"/>
    <id>http://yoursite.com/2019/07/30/post/</id>
    <published>2019-07-30T14:36:49.000Z</published>
    <updated>2019-08-02T01:38:22.371Z</updated>
    
    <content type="html"><![CDATA[<p>标题和副标题都是我瞎起的，只有摘要是认真写的。</p><p>起因是听观影风向标一五年戛纳那期节目时，被波米科普了戛纳颁奖的前前后后，其中谈论的马伯庸对《刺客聂隐娘》的批评言论及其引发的争论（马在未看过电影的前提下喷《聂》是连故事都讲不清的电影云云，引发了包括但不限于[观众与导演表达权利是否对等]/[电影的故事中心论]等一系列争论），结合我后来了解到的波米，使我联想到了许多曾在我心中杂乱扎根但又从未厘清的一些树木。</p><h2 id="电影史话里的鸡和蛋"><a href="#电影史话里的鸡和蛋" class="headerlink" title="电影史话里的鸡和蛋"></a>电影史话里的鸡和蛋</h2><p>关于电影本质的讨论无休无止，且从不会达成一致，如果沿着电影的原教旨轨迹出发，从卢米埃尔兄弟发明电影之初，到卡努杜等人为电影发表《第七艺术的诞生》，尚在探索阶段的电影并没有什么本质可言——拍电影几乎就是固定场景一镜到底——其艺术属性相比于其他艺术形式相当薄弱单调，但其间并不是没有先驱探索——梅里爱摒弃一镜到底拍出一众奇观电影，埃德温·鲍特最早使用镜头变换拍出《火车大劫案》——电影也才有了剪辑和镜头语言的概念，电影的叙事使命也应运而生，再到后来，格里菲斯将前人技法发扬光大发明了蒙太奇，至此，逐渐丰富的电影表现手法使得电影的叙事技法不断翻出花样，也使得电影的艺术属性得到初步完善。</p><p>你可以说，叙事需求是电影在形式和技法探索途中无可避免的产物，可以说叙事就是一种新探索出的电影技法，也可以说正是因为电影人为了更好地讲故事才催生了电影里那些先锋形式和革新技法，但不管怎么样，电影叙事作为从属于电影艺术形式的一个单位，都不能脱离电影媒介而独立存在——无论我们在谈论哪部电影故事讲的如何如何，它都不只是那个故事的文本本身——还天然包含了电影独有的艺术属性。</p><p>而被冠之以“不会讲故事”名号的《聂隐娘》正是通过一种全新的探索性的电影语言对一段时间/历史做出呈现，它打破的不仅是常见的电影叙事手法，还有传统武侠电影的类型技法（比如镜头调度/场景设置）。</p><h2 id="为什么要探索宇宙？"><a href="#为什么要探索宇宙？" class="headerlink" title="为什么要探索宇宙？"></a>为什么要探索宇宙？</h2><p>我始终觉得，看电影不是批大字报，不是党同伐异，是有来有回，是愿者上钩，关注它作为电影在整体和个体上的不同与相同，理解电影和电影以外，达成对作品和作者的理解，而退一步讲，如果我不喜欢不明白，能不能抑制住想要玩命否定立刻站队的冲动，而换一种更有效的办法来行使作为观众的权利去完成自我表达呢？在这里我想到了<a href="http://www.lettersofnote.com/2012/08/why-explore-space.html" target="_blank" rel="noopener">NASA和赞比亚修女Mary Jucunda之间的通信</a>，修女看到美国宇航局每年的巨额花费时，她说的是“当世界上还有那么多小孩吃不饱饭时你们为什么花这么多钱在一个探索火星的项目上”，而不是“当世界上还有那么多小孩吃不饱饭时你们花这么多钱探索火星真是<del><strong>残忍无情傻逼</strong></del>”，NASA方面给出的回信很长，最后一段是这样写的</p><blockquote><p>Very fortunately though, the space age not only holds out a mirror in which we can see ourselves, it also provides us with the technologies, the challenge, the motivation, and even with the optimism to attack these tasks with confidence. What we learn in our space program, I believe, is fully supporting what Albert Schweitzer had in mind when he said: “I am looking at the future with concern, but with good hope.”</p></blockquote><p>从某种意义上，修女对于NASA的疑惑也就像观众我辈对于《聂》的不解，就像是自此处向远方投去的眺望，和想要努力看清远方的热切，这样想的话侯导又何尝不是在眺望他自己的远方呢，用另一种方式去看目不能及足的世界，靠时间的堆积到达自己眺望过的地方，用福柯的话来讲就是<strong>“对知识的热情，如果仅仅导致某种程度的学识的增长，而不是以这样或那样的方式尽可能使求知者偏离自我的话，那这种热情还有什么价值可言？在人生中：如果人们进一步观察和思考，有些时候就绝对需要提出这样的问题：了解人能否采取与自己原有的思维方式不同的方式思考，能否采取与自己原有的观察方式不同的方式感知。”</strong>，这些不同本身就是意义所在，是特瑞吉列姆和詹姆斯卡梅隆向克利斯马克横跨三十年的致敬，是诺兰在雷乃将死之前完成的《盗梦空间》（虽然诺兰说他<a href="https://artsbeat.blogs.nytimes.com/2010/06/30/a-man-and-his-dream-christopher-nolan-and-inception/?mtrref=undefined&gwh=F68694E1AE10624206DE88A261025F03&gwt=pay" target="_blank" rel="noopener">没看过《去年在马里昂巴德》</a>，这又可以延申到其他话题——有关电影与评论的创作关系，以及历史的撞车），那些看上去空无一物的东西被时间赋予了丰富的普适意义，并将继续繁茂。</p><h2 id="马克思会梦见克里奥佩特拉的鼻子吗？"><a href="#马克思会梦见克里奥佩特拉的鼻子吗？" class="headerlink" title="马克思会梦见克里奥佩特拉的鼻子吗？"></a>马克思会梦见克里奥佩特拉的鼻子吗？</h2><p>以上讨论的语境是十足电影主义的，提起电影主义自然会想起网络迷踪那期节目里的桌面电影大盘点，以及随之而来的问题——桌面电影能代表电影吗？波米的担忧在于桌面电影失掉了基本的电影语言（剪辑）会使得电影界限变得模糊（<del>吗？</del>），此类视频化电影的兴起与其迅速增长的受众群体会降低了电影制作的门槛（<del>吗？</del>），电影会逐渐被视频化（<del>吗？</del>）</p><p>有一种从历史唯物主义出发的观点是这样的——即使电影变成那样，那也不过是历史所做出的客观扬弃，是历史使得电影从最初的卢米埃尔演变成如今的桌面电影，让电影艺术产生时间上不可逆的融合，你能阻挡历史进程的客观行进吗？我不能，但我可以选择我参与历史的方式，历史它对电影完成怎样的时代融合不取决于个人，但取决于每个个体的加总，是观众和作者的加总（我实在不想从什么历史唯物的角度讨论电影的走向，那种口吻实在像拿着某版标准答案狂喷自己学生无能的中学老师一样，未免太恃己太执果索因了些）。</p><h2 id="我自己画极坐标"><a href="#我自己画极坐标" class="headerlink" title="我自己画极坐标"></a>我自己画极坐标</h2><p>说到这里，又可以延申出，观众和作者在电影融合途中的角色，我想这里应该有一个作品意识（观看意识/创作意识）的坐标轴，观众的最左是被投喂什么就吃什么（院线电影观众），最右则是不甘心做他人的茧（艺术馆观众），而导演的最左是唯观众与市场论者（商业片导演），最右则是绝对意义上的电影艺术探索者（艺术片导演）（我能立刻想到的就是阿巴斯，也大概有些理解为什么戈达尔说电影始于格里菲斯止于阿巴斯，因为无论是前者还是后者，他们对电影艺术可能性的探索都极具开创性，而阿巴斯又更纯粹一些，以至于让人相信无论是他的作品还是他对电影技作可能性的挖掘都饱满丰富，生生长流，当然这也与戈达尔本人对电影的实践做法相似），毫无疑问诺兰应该处于这个坐标的中间——似乎没有导演比他更懂大多数观众了，也似乎没有人比他在商业片类型化的创新上更娴熟了，但他能算作一个纯粹的作者导演吗？写到这里，也发现这个坐标轴只是狭隘一隅，除了时间维度的扩展（这里又可以延申到时间轴上的大起大落型选手），更应该加入新的维度。</p><h4 id="这简直是一个无穷无尽的DFS啊！"><a href="#这简直是一个无穷无尽的DFS啊！" class="headerlink" title="这简直是一个无穷无尽的DFS啊！"></a>这简直是一个无穷无尽的DFS啊！</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标题和副标题都是我瞎起的，只有摘要是认真写的。&lt;/p&gt;&lt;p&gt;起因是听观影风向标一五年戛纳那期节目时，被波米科普了戛纳颁奖的前前后后，其中谈论的马伯庸对《刺客聂隐娘》的批评言论及其引发的争论（马在未看过电影的前提下喷《聂》是连故事都讲不清的电影云云，引发了包括但不限于[观众与
      
    
    </summary>
    
      <category term="物质现实复原" scheme="http://yoursite.com/categories/%E7%89%A9%E8%B4%A8%E7%8E%B0%E5%AE%9E%E5%A4%8D%E5%8E%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>img</title>
    <link href="http://yoursite.com/2019/07/29/img/"/>
    <id>http://yoursite.com/2019/07/29/img/</id>
    <published>2019-07-29T16:57:56.000Z</published>
    <updated>2019-07-29T16:58:44.138Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Class bulti-in methods</title>
    <link href="http://yoursite.com/2019/07/13/test/"/>
    <id>http://yoursite.com/2019/07/13/test/</id>
    <published>2019-07-13T20:25:16.000Z</published>
    <updated>2019-07-30T14:32:48.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-getattribute-method"><a href="#1-getattribute-method" class="headerlink" title="1. __getattribute__ method"></a>1. __getattribute__ method</h3><p>This method usually implements a class’s getter to <strong>get</strong> whatever you request (<strong>attributes and methods</strong>) from an object/a class.<br>I don’t know for sure the difference with __getattr__</p><p>A common way of implementing this method is as follows:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span>lo<span class="token punctuation">,</span> high<span class="token operator">=</span>hi<span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattribute__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        builtin_members <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> name <span class="token keyword">in</span> builtin_members<span class="token punctuation">:</span>             <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>size<span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span></code></pre><p><strong>Question</strong>: What is the following codes’ output?</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>The answer is 1.</p><p>And what about the results when we change the test’s structure to this:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lo<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>low<span class="token operator">=</span>lo<span class="token punctuation">,</span> high<span class="token operator">=</span>hi<span class="token punctuation">,</span> size<span class="token operator">=</span>size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattribute__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        builtin_members <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> name <span class="token keyword">in</span> builtin_members<span class="token punctuation">:</span>             <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> object<span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>size<span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span></code></pre><p>The answer is 10.</p><p>And the reason is</p><ol><li><code>test</code> inherits from <code>object</code>, so <code>super().__getattribute__(name)</code> = <code>object.__getattribute__(self, name)</code></li><li>the first class doesn’t implement the case when <strong>non-builtin members</strong> are retrived, so it automatically returns <code>None</code> whose size is 1.</li></ol><p>Sometimes, there are many other complex implementation of an attribute getter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-getattribute-method&quot;&gt;&lt;a href=&quot;#1-getattribute-method&quot; class=&quot;headerlink&quot; title=&quot;1. __getattribute__ method&quot;&gt;&lt;/a&gt;1. __getattribute_
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Magic Methods" scheme="http://yoursite.com/categories/Python/Magic-Methods/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/24/hello-world/"/>
    <id>http://yoursite.com/2019/06/24/hello-world/</id>
    <published>2019-06-25T01:51:47.291Z</published>
    <updated>2019-06-25T01:51:47.291Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
